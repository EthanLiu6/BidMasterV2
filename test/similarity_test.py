from src.model_backend.sentence_model import SentenceModel
from sentence_transformers.util import cos_sim
from sentence_transformers import SentenceTransformer


def test01_cos_sim():
    query = '开标现场由采购代理机构主持，采购人可以不参与吗？'
    sentences = [
        '《中华人民共和国政府采购法实施条例》第三章（政府采购方式）第二十五条\n政府采购工程依法不进行招标的，应当依照政府采购法和本条例规定的竞争性谈判或者单一来源采购方式采购。',
        '《中华人民共和国政府采购法》第二章（政府采购当事人）第十九条\n采购人可以委托集中采购机构以外的采购代理机构，在委托的范围内办理政府采购事宜。采购人有权自行选择采购代理机构，任何单位和个人不得以任何方式为采购人指定采购代理机构。',
        '《政府采购货物和服务招标投标管理办法》第四章（开标、评标）第四十二条\n开标过程应当由采购人或者采购代理机构负责记录，由参加开标的各投标人代表和相关工作人员签字确认后随采购文件一并存档。投标人代表对开标过程和开标记录有疑义，以及认为采购人、采购代理机构相关工作人员有需要回避的情形的，应当提出询问或者回避申请。采购人、采购代理机构对投标人代表提出的询问或者回避申请应当及时处理。投标人未参加开标的，视同认可开标结果。',
        '《中华人民共和国政府采购法》第七章（监督检查）第六十条\n政府采购监督管理部门不得设置集中采购机构，不得参与政府采购项目的采购活动。采购代理机构与行政机关不得存在隶属关系或者其他利益关系。',
        '《政府采购货物和服务招标投标管理办法》第四章（开标、评标）第四十条\n开标由采购人或者采购代理机构主持，邀请投标人参加。评标委员会成员不得参加开标活动。',
        '《中华人民共和国政府采购法》第二章（政府采购当事人）第十八条\n采购人采购纳入集中采购目录的政府采购项目，必须委托集中采购机构代理采购；采购未纳入集中采购目录的政府采购项目，可以自行采购，也可以委托集中采购机构在委托的范围内代理采购。纳入集中采购目录属于通用的政府采购项目的，应当委托集中采购机构代理采购；属于本部门、本系统有特殊要求的项目，应当实行部门集中采购；属于本单位有特殊要求的项目，经省级以上人民政府批准，可以自行采购。',
        '《政府采购货物和服务招标投标管理办法》第一章（总则）第八条\n采购人委托采购代理机构代理招标的，采购代理机构应当在采购人委托的范围内依法开展采购活动。采购代理机构及其分支机构不得在所代理的采购项目中投标或者代理投标，不得为所代理的采购项目的投标人参加本项目提供投标咨询。',
        '《中华人民共和国政府采购法》第三章（政府采购方式）第二十八条\n采购人不得将应当以公开招标方式采购的货物或者服务化整为零或者以其他任何方式规避公开招标采购。']

    # model = SentenceModel('../models/thenlper/gte-large-zh')
    # search_emb, emb_shape = model.encode(sentences)
    # query_emb, _ = model.encode(query)
    # 使用Milvus的search的结果(与自建的encode余弦相似度一致？)：
    # [0.729775071144104, 0.7288713455200195, 0.723609209060669, 0.7187605500221252, 0.712833821773529, 0.7097634673118591, 0.7072374224662781, 0.7041965126991272]
    # print(cos_sim(search_emb, query_emb).tolist())

    model = SentenceTransformer('../models/thenlper/gte-large-zh')
    search_emb = model.encode(sentences)
    query_emb = model.encode(query)
    # 使用Milvus的search的结果(与自建的encode余弦相似度一致？)：
    # [0.729775071144104, 0.7288713455200195, 0.723609209060669, 0.7187605500221252, 0.712833821773529, 0.7097634673118591, 0.7072374224662781, 0.7041965126991272]
    print(cos_sim(search_emb, query_emb).tolist())


if __name__ == '__main__':
    # 重大发现：
    # 1. 自建的SentenceModel的decode与SentenceTransformer的decode一致
    # 2. Milvus的search结果（distance）与上面两种的余弦相似度结果一致！
    test01_cos_sim()
